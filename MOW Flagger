@name MOW Flagger
@inputs 
@outputs Active
#@outputs W:string
@persist A Point HitBox:entity HitBoxes:array HolosIDXs:table Type Prints:array
@trigger 

#Toast

if(first() | dupefinished()){
    
    #Crowbar must be drawn to operate flagger.
    #Right click to place.
    #Left click to delete.
    #R to cycle flag types.
    #There is no config, don't touch anything.
    
    Type = 0
    
    HitBoxes = array()
    HolosIDXs = table()
    
    A = 0
    Point = A
    holoCreate(A, vec(0,0,0),vec(1),ang(0,0,0))
    holoModel(A,"models/sprops/misc/origin.mdl")
    holoScale(A,vec(0.5))
    
    A = 1
    HitBox = holoEntity(A)
    holoCreate(A, 
    holoEntity(Point):toWorld(vec(0,0,18)), vec(1),
    holoEntity(Point):toWorld(ang(0,0,0)))
    holoModel(A,"models/sprops/cuboids/height36/size_0/cube_18x18x36.mdl")
    holoParent(A,holoEntity(Point))
    holoMaterial(A,"models/debug/debugwhite")
    holoAlpha(A,50)
    
    Prints = array(
    "Red",
    "Red/Yellow",
    "Yellow",
    "Green"
    )
    
    function void flagUpdate(PointPos:vector){
        holoPos(Point,PointPos)
        local Ang = (holoEntity(0):pos() - owner():pos()):toAngle()
        holoAng(Point,ang(0,Ang:yaw(),0))
    }
    
    function void flagCreate(CycleKey,PlaceKey){
        if(changed(CycleKey) & CycleKey){
            Type++
            if(Type > 3){Type = 0}
            print(Prints[Type+1,string])
            owner():soundPlay(0,0,"garrysmod/ui_return.wav")
        }
        if(changed(PlaceKey) & PlaceKey){
            owner():soundPlay(0,0,"garrysmod/ui_click.wav")
            local Ang = (holoEntity(0):pos() - owner():pos()):toAngle()
            local Pos = holoEntity(1):pos()
            Spawn = propSpawn("models/sprops/cuboids/height36/size_0/cube_18x18x36.mdl",Pos,holoEntity(Point):toWorld(ang(0,0,0)),1)
            Spawn:setMaterial("models/proppertextures/invisible")
            Spawn:setNoCollideAll()
            
            A++
            holoCreate(A, 
            Spawn:toWorld(vec(0,0,0)), vec(1),
            Spawn:toWorld(ang(90,0,0)))
            holoColor(A, vec4(255,255,255,255))
            holoModel(A, "models/sprops/rectangles/size_1/rect_3x36x3.mdl")
            holoScale(A, vec(1,1,1))
            holoParent(A, Spawn)
            holoMaterial(A,"models/proppertextures/aluminum")
                
            switch(Type){
                case 0,
                #Red
                A++
                holoCreate(A, 
                Spawn:toWorld(vec(-2,0,5)), vec(1),
                Spawn:toWorld(ang(90,0,0)))
                holoColor(A, vec4(240,0,0,255))
                holoModel(A, "models/sprops/rectangles_thin/size_2_5/rect_18x24x1_5.mdl")
                holoScale(A, vec(1,1,1))
                holoParent(A, Spawn)
                holoMaterial(A,"models/proppertextures/acrylic")
                break
                
                case 1,
                #Red/Yellow
                A++
                holoCreate(A, 
                Spawn:toWorld(vec(-2,0,11)), vec(1),
                Spawn:toWorld(ang(0,90,90)))
                holoColor(A, vec4(240,0,0,255))
                holoModel(A, "models/sprops/rectangles_thin/size_2/rect_12x18x1_5.mdl")
                holoScale(A, vec(1,1,1))
                holoParent(A, Spawn)
                holoMaterial(A,"models/proppertextures/acrylic")
                
                A++
                holoCreate(A, 
                Spawn:toWorld(vec(-2,0,-1)), vec(1),
                Spawn:toWorld(ang(0,90,90)))
                holoColor(A, vec4(240,225,0,255))
                holoModel(A, "models/sprops/rectangles_thin/size_2/rect_12x18x1_5.mdl")
                holoScale(A, vec(1,1,1))
                holoParent(A, Spawn)
                holoMaterial(A,"models/proppertextures/acrylic")
                break
                
                case 2,
                #Yellow
                A++
                holoCreate(A, 
                Spawn:toWorld(vec(-2,0,5)), vec(1),
                Spawn:toWorld(ang(90,0,0)))
                holoColor(A, vec4(240,225,0,255))
                holoModel(A, "models/sprops/rectangles_thin/size_2_5/rect_18x24x1_5.mdl")
                holoScale(A, vec(1,1,1))
                holoParent(A, Spawn)
                holoMaterial(A,"models/proppertextures/acrylic")
                break
                
                case 3,
                #Green
                A++
                holoCreate(A, 
                Spawn:toWorld(vec(-2,0,5)), vec(1),
                Spawn:toWorld(ang(90,0,0)))
                holoColor(A, vec4(0,240,0,255))
                holoModel(A, "models/sprops/rectangles_thin/size_2_5/rect_18x24x1_5.mdl")
                holoScale(A, vec(1,1,1))
                holoParent(A, Spawn)
                holoMaterial(A,"models/proppertextures/acrylic")
                break
                
                default,
                break
            }
            
            #[
            A++
            holoCreate(A, 
            holoEntity(Point):toWorld(vec(0,0,9)), vec(1),
            holoEntity(Point):toWorld(ang(90,0,0)))
            holoModel(A,"models/sprops/cuboids/height12/size_1/cube_12x18x12.mdl")
            holoMaterial(A,"models/debug/debugwhite")
            holoAlpha(A,50)
            HitBoxes:pushNumber(A)
            ]#
            #print(Spawn:id())
            HitBoxes:pushNumber(Spawn:id())
            #print(HitBoxes)
        }
        
    }
    function void flagDelete(DelKey){
        if(changed(DelKey) & DelKey){
            local LEnt = owner():aimEntity()
            findToArray()
            for(I = 0, HitBoxes:count()){
                I++
                local CurID = HitBoxes[I,number]
                #print("Array Index: "+I)
                #print("Current ID: "+CurID)
                #print("End ID: "+LEnt:id())
                if((LEnt:id() == CurID) & LEnt:id() != 0){
                    owner():soundPlay(0,0,"garrysmod/balloon_pop_cute.wav")
                    LEnt:propDelete()
                    HitBoxes:remove(I)
                    #print("Deleted!")
                    break
                }
            }
        }
    }
}

interval(150)
runOnKeys(owner(),1)
runOnChat(1)
#W = owner():weapon():toString()

if(owner():weapon():type()=="weapon_crowbar"){
    Active = 1
    PntPos = owner():aimPos()
    M1 = owner():keyAttack1()
    M2 = owner():keyAttack2()
    R = owner():keyReload()
    LookEnt = owner()
    
    
    flagUpdate(PntPos)
    flagCreate(R,M2)
    flagDelete(M1)
}else{
    Active = 0
    PntPos = entity():pos()
    flagUpdate(PntPos)
}

if(chatClk(owner())){
    if(owner():lastSaid() == ".delete"){
        hideChat(1)
        for(I = 0, HitBoxes:count()-1){
            I++
            entity(HitBoxes[I,number]):propDelete()
            #print(HitBoxes[I,number])
        }
        print("Deleting MOW flags and E2...")
        entity():propDelete()
    }
}
